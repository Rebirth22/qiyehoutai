// vite.config.ts
import { defineConfig, loadEnv } from "file:///E:/desktop/admin/vue3-elment/node_modules/.pnpm/vite@4.4.5_@types+node@20.4.4_sass@1.64.1/node_modules/vite/dist/node/index.js";
import vue from "file:///E:/desktop/admin/vue3-elment/node_modules/.pnpm/@vitejs+plugin-vue@4.2.3_vite@4.4.5_vue@3.3.4/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import path from "path";
import { createSvgIconsPlugin } from "file:///E:/desktop/admin/vue3-elment/node_modules/.pnpm/vite-plugin-svg-icons@2.0.1_vite@4.4.5/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import { viteMockServe } from "file:///E:/desktop/admin/vue3-elment/node_modules/.pnpm/vite-plugin-mock@2.9.8_mockjs@1.1.0_vite@4.4.5/node_modules/vite-plugin-mock/dist/index.js";
var vite_config_default = defineConfig(({ command, mode }) => {
  const env = loadEnv(mode, process.cwd());
  return {
    plugins: [
      vue(),
      createSvgIconsPlugin({
        //
        // 指定缓存图标的文件夹
        iconDirs: [path.resolve(process.cwd(), "src/assets/icons")],
        // 指定图标的引用格式
        symbolId: "icon-[dir]-[name]"
      }),
      viteMockServe({
        //保证开发阶段可以使用mock
        localEnabled: command === "serve"
      })
    ],
    resolve: {
      //别名配置
      alias: {
        // 相对路径别名配置，使用 @ 代替 src
        "@": path.resolve("./src")
      }
    },
    // scss全局变量的一个样式
    css: {
      preprocessorOptions: {
        scss: {
          javascriptEnabled: true,
          additionalData: '@import "./src/styles/variable.scss";'
        }
      }
    },
    //代理跨域
    server: {
      proxy: {
        [env.VITE_APP_BASE_API]: {
          // 获取数据服务器地址设置
          target: env.VITE_SERVE,
          // 需要代理跨域
          changeOrigin: true,
          // 路径重写
          rewrite: (path2) => path2.replace(/^\/api/, "")
        }
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOlxcXFxkZXNrdG9wXFxcXGFkbWluXFxcXHZ1ZTMtZWxtZW50XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFxkZXNrdG9wXFxcXGFkbWluXFxcXHZ1ZTMtZWxtZW50XFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9FOi9kZXNrdG9wL2FkbWluL3Z1ZTMtZWxtZW50L3ZpdGUuY29uZmlnLnRzXCI7Ly9kZWZpbmVDb25maWcgXHU1MUZEXHU2NTcwXHU3NTI4XHU0RThFXHU1QjlBXHU0RTQ5IFZpdGUgXHU3Njg0XHU5MTREXHU3RjZFXHU2NTg3XHU0RUY2XHVGRjBDXHU1QjgzXHU2M0E1XHU1M0Q3XHU0RTAwXHU0RTJBXHU5MTREXHU3RjZFXHU1QkY5XHU4QzYxXHU0RjVDXHU0RTNBXHU1M0MyXHU2NTcwXHVGRjBDXHU1RTc2XHU4RkQ0XHU1NkRFXHU0RTAwXHU0RTJBXHU2NzA5XHU2NTQ4XHU3Njg0XHU5MTREXHU3RjZFXHU1QkY5XHU4QzYxXHUzMDAybG9hZEVudiBcdTUxRkRcdTY1NzBcdTc1MjhcdTRFOEVcdTUyQTBcdThGN0RcdTczQUZcdTU4ODNcdTUzRDhcdTkxQ0ZcdUZGMENcdTVCODNcdTY4MzlcdTYzNkVcdTVGNTNcdTUyNERcdTczQUZcdTU4ODNcdTU0OENcdTkxNERcdTdGNkVcdTc2ODRcdTUzRDhcdTkxQ0ZcdTU0MERcdUZGMENcdTVDMDZcdTczQUZcdTU4ODNcdTUzRDhcdTkxQ0ZcdTc2ODRcdTUwM0NcdTUyQTBcdThGN0RcdTUyMzBcdTVFOTRcdTc1MjhcdTdBMEJcdTVFOEZcdTRFMkRcdTMwMDJcbmltcG9ydCB7IGRlZmluZUNvbmZpZywgbG9hZEVudiB9IGZyb20gJ3ZpdGUnXG5pbXBvcnQgdnVlIGZyb20gJ0B2aXRlanMvcGx1Z2luLXZ1ZSdcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG4vLyBcdTVGMTVcdTUxNjVzdmdcdTk3MDBcdTg5ODFcdTc1MjhcdTUyMzBcdTc2ODRcdTYzRDJcdTRFRjZcbmltcG9ydCB7IGNyZWF0ZVN2Z0ljb25zUGx1Z2luIH0gZnJvbSAndml0ZS1wbHVnaW4tc3ZnLWljb25zJ1xuLy9cdTVGMTVcdTUxNjVtb2NrY2hhXHU2M0QyXHU0RUY2XHU2QTIxXHU2MkRGXG5pbXBvcnQgeyB2aXRlTW9ja1NlcnZlIH0gZnJvbSAndml0ZS1wbHVnaW4tbW9jaydcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBjb21tYW5kLCBtb2RlIH0pID0+IHtcbiAgLy8gXHU4M0I3XHU1M0Q2XHU1NDA0XHU3OUNEXHU3M0FGXHU1ODgzXHU0RTBCXHU3Njg0XHU1QkY5XHU1RTk0XHU3Njg0XHU1M0Q4XHU5MUNGXG4gIC8vbW9kZTpcdTUzM0FcdTUyMDZcdTRFMERcdTU0MENcdTc2ODRcdTczQUZcdTU4ODMgIHByb2Nlc3MuY3dkKClcdTY2MkYgTm9kZS5qcyBcdTRFMkRcdTc2ODRcdTUxRkRcdTY1NzBcdUZGMENcdThGRDRcdTU2REVcdTVGNTNcdTUyNERcdTVERTVcdTRGNUNcdTc2RUVcdTVGNTVcdTc2ODRcdThERUZcdTVGODRcdTMwMDJcdTZCNjRcdTU5MDRcdTRFM0Fsb2FkRW52XHU1MUZEXHU2NTcwXHU3Njg0XHU1M0MyXHU2NTcwXHU0RjIwXHU5MDEyXHU3RUQ5XHU0RTg2XHU4QkU1XHU1MUZEXHU2NTcwXHVGRjBDXHU3NTI4XHU0RThFXHU2MzA3XHU1QjlBXHU1MkEwXHU4RjdEXHU3M0FGXHU1ODgzXHU1M0Q4XHU5MUNGXHU3Njg0XHU3NkVFXHU1RjU1XHUzMDAyXG4gIGNvbnN0IGVudiA9IGxvYWRFbnYobW9kZSwgcHJvY2Vzcy5jd2QoKSlcblxuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFtcbiAgICAgIHZ1ZSgpLFxuICAgICAgY3JlYXRlU3ZnSWNvbnNQbHVnaW4oey8vXG4gICAgICAgIC8vIFx1NjMwN1x1NUI5QVx1N0YxM1x1NUI1OFx1NTZGRVx1NjgwN1x1NzY4NFx1NjU4N1x1NEVGNlx1NTkzOVxuICAgICAgICBpY29uRGlyczogW3BhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnc3JjL2Fzc2V0cy9pY29ucycpXSxcbiAgICAgICAgLy8gXHU2MzA3XHU1QjlBXHU1NkZFXHU2ODA3XHU3Njg0XHU1RjE1XHU3NTI4XHU2ODNDXHU1RjBGXG4gICAgICAgIHN5bWJvbElkOiAnaWNvbi1bZGlyXS1bbmFtZV0nLFxuICAgICAgfSksXG4gICAgICB2aXRlTW9ja1NlcnZlKHsvL1x1NEZERFx1OEJDMVx1NUYwMFx1NTNEMVx1OTYzNlx1NkJCNVx1NTNFRlx1NEVFNVx1NEY3Rlx1NzUyOG1vY2tcbiAgICAgICAgbG9jYWxFbmFibGVkOiBjb21tYW5kID09PSAnc2VydmUnLCBcbiAgICAgIH0pLFxuICAgIF0sXG4gICAgcmVzb2x2ZTogey8vXHU1MjJCXHU1NDBEXHU5MTREXHU3RjZFXG4gICAgICBhbGlhczogey8vIFx1NzZGOFx1NUJGOVx1OERFRlx1NUY4NFx1NTIyQlx1NTQwRFx1OTE0RFx1N0Y2RVx1RkYwQ1x1NEY3Rlx1NzUyOCBAIFx1NEVFM1x1NjZGRiBzcmNcbiAgICAgICAgJ0AnOiBwYXRoLnJlc29sdmUoJy4vc3JjJyksIFxuICAgICAgfSxcbiAgICB9LFxuICAgIC8vIHNjc3NcdTUxNjhcdTVDNDBcdTUzRDhcdTkxQ0ZcdTc2ODRcdTRFMDBcdTRFMkFcdTY4MzdcdTVGMEZcbiAgICBjc3M6IHtcbiAgICAgIHByZXByb2Nlc3Nvck9wdGlvbnM6IHtcbiAgICAgICAgc2Nzczoge1xuICAgICAgICAgIGphdmFzY3JpcHRFbmFibGVkOiB0cnVlLFxuICAgICAgICAgIGFkZGl0aW9uYWxEYXRhOiAnQGltcG9ydCBcIi4vc3JjL3N0eWxlcy92YXJpYWJsZS5zY3NzXCI7JyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICAvL1x1NEVFM1x1NzQwNlx1OERFOFx1NTdERlxuICAgIHNlcnZlcjoge1xuICAgICAgcHJveHk6IHtcbiAgICAgICAgW2Vudi5WSVRFX0FQUF9CQVNFX0FQSV06IHtcbiAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTY1NzBcdTYzNkVcdTY3MERcdTUyQTFcdTU2NjhcdTU3MzBcdTU3NDBcdThCQkVcdTdGNkVcbiAgICAgICAgICB0YXJnZXQ6IGVudi5WSVRFX1NFUlZFLFxuICAgICAgICAgIC8vIFx1OTcwMFx1ODk4MVx1NEVFM1x1NzQwNlx1OERFOFx1NTdERlxuICAgICAgICAgIGNoYW5nZU9yaWdpbjogdHJ1ZSxcbiAgICAgICAgICAvLyBcdThERUZcdTVGODRcdTkxQ0RcdTUxOTlcbiAgICAgICAgICByZXdyaXRlOiAocGF0aCkgPT4gcGF0aC5yZXBsYWNlKC9eXFwvYXBpLywgJycpLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgIH1cbiAgfVxufSlcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxTQUFTLGNBQWMsZUFBZTtBQUN0QyxPQUFPLFNBQVM7QUFDaEIsT0FBTyxVQUFVO0FBRWpCLFNBQVMsNEJBQTRCO0FBRXJDLFNBQVMscUJBQXFCO0FBRzlCLElBQU8sc0JBQVEsYUFBYSxDQUFDLEVBQUUsU0FBUyxLQUFLLE1BQU07QUFHakQsUUFBTSxNQUFNLFFBQVEsTUFBTSxRQUFRLElBQUksQ0FBQztBQUV2QyxTQUFPO0FBQUEsSUFDTCxTQUFTO0FBQUEsTUFDUCxJQUFJO0FBQUEsTUFDSixxQkFBcUI7QUFBQTtBQUFBO0FBQUEsUUFFbkIsVUFBVSxDQUFDLEtBQUssUUFBUSxRQUFRLElBQUksR0FBRyxrQkFBa0IsQ0FBQztBQUFBO0FBQUEsUUFFMUQsVUFBVTtBQUFBLE1BQ1osQ0FBQztBQUFBLE1BQ0QsY0FBYztBQUFBO0FBQUEsUUFDWixjQUFjLFlBQVk7QUFBQSxNQUM1QixDQUFDO0FBQUEsSUFDSDtBQUFBLElBQ0EsU0FBUztBQUFBO0FBQUEsTUFDUCxPQUFPO0FBQUE7QUFBQSxRQUNMLEtBQUssS0FBSyxRQUFRLE9BQU87QUFBQSxNQUMzQjtBQUFBLElBQ0Y7QUFBQTtBQUFBLElBRUEsS0FBSztBQUFBLE1BQ0gscUJBQXFCO0FBQUEsUUFDbkIsTUFBTTtBQUFBLFVBQ0osbUJBQW1CO0FBQUEsVUFDbkIsZ0JBQWdCO0FBQUEsUUFDbEI7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBO0FBQUEsSUFFQSxRQUFRO0FBQUEsTUFDTixPQUFPO0FBQUEsUUFDTCxDQUFDLElBQUksaUJBQWlCLEdBQUc7QUFBQTtBQUFBLFVBRXZCLFFBQVEsSUFBSTtBQUFBO0FBQUEsVUFFWixjQUFjO0FBQUE7QUFBQSxVQUVkLFNBQVMsQ0FBQ0EsVUFBU0EsTUFBSyxRQUFRLFVBQVUsRUFBRTtBQUFBLFFBQzlDO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFsicGF0aCJdCn0K
